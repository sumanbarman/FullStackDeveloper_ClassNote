
Day1 - 10th March
------------------
Trainer - Satish Mahajan

To know node verseion -> node -verseion
To know the ng version -> ng -version

AngularJS 2.0
-------------
1. Component Based. Not MVC based.
2. Component require a placehlder
    a. Component consists of view part. Ex: Login Component 
    b. 


Path - C:\Users\sumbarma\AppData\Roaming

To install Angular JS2 using npm
1. Go to Command Prompt
2. npm install -g @angular/cli

* Command to ceate the basic structure of the application
ng new ApplicationName

Github Reference
https://github.com/angular/quickstart
https://github.com/angular/angular-cli

Important Items inside package structure
----------------
package.json            - For Dependencies Configuration
angular-cli.json        - For Project Configuration - Application level Configuration
tsconfig.json           - For TypeScript
tslint.json             - For Testing
karma.conf.json         - For Testing

To start tsc server -> npm start
http://localhost:4200

Content Management Tool

Day2 - 17th March
------------------
Ref: https://angular.io/docs

# Component consits of 
    1. Template - (html+css)
    2. Class - (properties + methods)
    3. Metadata (Decorator is quivalent to Annotation) - bridge between Template and Class.

# Component has to be inject using Placeholder.
    ****** SELECTOR / Custom Tag ********
        1. Need to inject inside index.html by Selector (custom tag). 
        2. Selector needs to apply in the new Component.

# How to angular will undestand to about new component.
    Need to register with Bootstrap in App Component (Default Component of Angular)

    #4 Ways of binding
        1. Interpolation binding. Ex: {{}}. One way binding - class to html.
        2. property binding. Ex: Set the value of Attribute of a tag dynamically <img [src]='product.productName'>
        3. Event binding. Ex: Binding the backend function with any event like Click, Mouse Over etc. <button (click) = 'toggeImage()'>
        4. 2 way binding. Ex:  Class to html and vice-versa. 
                                <input type='text' [(ngModel)] = 'listFilter' />
                                prerequisite:
                                1 .ngModel
                                2. Get Set Propert


# How to create a component
    -> ng g c products/product-detail.component  -- Angular Engine will create product folder in app folder
            app 
                product
                    product
                        product-details.component.ts
                        product-details.component.html
                        product-details.component.css
    -> ng g c products/product-detail.component --flat  -- Angular Engine will create belwo folder structure
            app 
                product
                        product-details.component.ts
                        product-details.component.html
                        product-details.component.css
    g - global
    c - component

#NgModule
    1. declaration
    2. imports
    3. providers - Ex: Services, Router, Files etc.
    4. bootstrap

2 Directives
*ngFor
*ngIf

#PIPE
# How to create Custome PIPE
ng g pipe convert-to-spaces.pipe.ts

#EvenEmitter Object - Push value to Parent Component
# @Input
# @Output


#Run Steps:
1. select package.json 
2. Right Click on that json and Open in Terminal/Command Prompt
3. run command -> npm start.

"imageUrl": "http://openclipart.org/image/300px/svg_to_png/26215/Anonymous_Leaf_Rake.png",       


Day3 - 24th March
------------------

# EvenEmitter Object - Push value to Parent Component
# @Input - pass from Outer Component to Input Component
# @Output - return the value to Outer Component from Input Component


# Component Life Cycle
    1. create
    2. Render
    3. Create amd render children
    4. Process Changes Destroy

# Service
    @Injectable() to indejec the dependecy like @Autowired
    Observale object  is like ResponseEntity.. hold Data + Error details.
    Subscribe() it accept two callback function as arguments
        Observable.subscribe( valuefunction, errorfunction);
        Observable.subscribe( products => 
                            this.products = products
                            this.filterProducts = this.products;
                            , errorfunction);

# Clouser Function vs CallBack Function    

#Hookup functions
    OnInit
    OnChange
    OnDestroy

#Create a new service
    ng g service ProductService   

#Routing API
    roulter link to link between to templates
    Gaurd service - filter between 2 templates.
    <router-outlet></router-outlet> - to active another component which link with router


structure

indexPage.html  
    
    welcomeComponent

    AppComponent

            AppModule

            ProductModule - We can put everything related to ProductModule by using @ngModule
                Product
                ProducListComponent
                ProductDetailComponent
                ProductGuardService
                ProductService

            Shared
                star Compopnent
                CustomePIPE

                Start Module - will contain everthing related to Star Components  

            Start Module will be declare in Product Module
            Poduct Module will be declare AppModule

@CrossOrigin

YML - Solutions
------------------
https://stackoverflow.com/questions/21271468/spring-propertysource-using-yaml
@ConfigurationProperties(path="classpath:/appprops.yml", name="db")
public class DbProperties {
    private String url;
    private String username;
    private String password;
...
}

@EnableConfigurationProperties(DbProperties.class)
public class PropertiesUsingService {

    @Autowired private DbProperties dbProperties;

}